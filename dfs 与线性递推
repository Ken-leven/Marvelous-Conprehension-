#include<iostream>
#include<deque>
using namespace std;
int map[1009][1009];
int vis[1009][1009];
int n,m;
long long ans=0;
deque<pair<int,int>>q;
void dfs(int a,int b)
{
    if(vis[a][b]==1||map[a][b]==1) return ;
    if(a==n&&b==n)
    {
        ans++;
        ans%=100003;
        return ;
    }
    q.push_back({a,b});
    vis[a][b]=1;
    dfs(a+1,b);
    dfs(a,b+1);
    vis[a][b]=0;
    q.pop_back();
}
int main()
{
    cin>>n>>m;
    for(int i=1;i<=n;i++)
    {
        map[i][n+1]=1;
        map[n+1][i]=1;
    }
    while(m--)
    {
        int x,y;
        cin>>x>>y;
        map[x][y]=1;
    }
    dfs(1,1);
    cout<<ans;
    return 0;
}


线性递推
#include<iostream>
using namespace std;
int map[1009][1009];
int vis[1009][1009];
int n,m;
long long dfs(int a,int b)
{
    if(vis[a][b]!=-1)
    {
        return vis[a][b];
    }
    if(map[a][b]==1)
    {
        vis[a][b]=0;
        return vis[a][b];
    }
    if(a>n||b>n||a<1||b<1)
    {
        return 0;
    }
    return vis[a][b]=(dfs(a+1,b)+dfs(a,b+1))%100003;
}
int main()
{
    cin>>n>>m;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            vis[i][j]=-1;
        }
    }
    while(m--)
    {
        int x,y;
        cin>>x>>y;
        map[x][y]=1;
    }
    vis[n][n]=1;//回溯时的关键 
    cout<<dfs(1,1);
    return 0;
}
